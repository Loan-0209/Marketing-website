const { chromium } = require('playwright');
const path = require('path');

async function openProjectInBrowser() {
    console.log('üåê M·ªü web browser ƒë·ªÉ xem d·ª± √°n HEART AI Campus...');
    
    try {
        // Launch browser v·ªõi giao di·ªán ƒë·∫ßy ƒë·ªß
        const browser = await chromium.launch({
            headless: false,
            args: [
                '--start-maximized',
                '--disable-web-security',
                '--allow-file-access-from-files',
                '--disable-features=VizDisplayCompositor'
            ]
        });
        
        const context = await browser.newContext({
            viewport: null // S·ª≠ d·ª•ng k√≠ch th∆∞·ªõc c·ª≠a s·ªï ƒë·∫ßy ƒë·ªß
        });
        
        // M·ªü nhi·ªÅu tab ƒë·ªÉ xem to√†n b·ªô d·ª± √°n
        
        // Tab 1: Trang ch·ªß HEART
        const page1 = await context.newPage();
        const indexPath = path.join(__dirname, 'index.html');
        await page1.goto(`file://${indexPath}`);
        await page1.waitForLoadState('networkidle');
        console.log('‚úÖ Tab 1: Trang ch·ªß HEART ƒë√£ t·∫£i');
        
        // Tab 2: 3D AI Campus (standalone)
        const page2 = await context.newPage();
        const campusPath = path.join(__dirname, 'master-plan-standalone.html');
        await page2.goto(`file://${campusPath}`);
        await page2.waitForLoadState('networkidle');
        console.log('‚úÖ Tab 2: 3D AI Campus ƒë√£ t·∫£i');
        
        // Tab 3: Test page ƒë·ªÉ ki·ªÉm tra
        const page3 = await context.newPage();
        const testPath = path.join(__dirname, 'simple-test.html');
        await page3.goto(`file://${testPath}`);
        await page3.waitForLoadState('networkidle');
        console.log('‚úÖ Tab 3: Test page ƒë√£ t·∫£i');
        
        // Tab 4: About page
        const page4 = await context.newPage();
        const aboutPath = path.join(__dirname, 'about.html');
        await page4.goto(`file://${aboutPath}`);
        await page4.waitForLoadState('networkidle');
        console.log('‚úÖ Tab 4: About page ƒë√£ t·∫£i');
        
        // Chuy·ªÉn v·ªÅ tab 3D Campus ƒë·ªÉ xem ƒë·∫ßu ti√™n
        await page2.bringToFront();
        
        console.log('\nüéâ D·ª∞ √ÅN HEART AI CAMPUS ƒê√É M·ªû TH√ÄNH C√îNG!');
        console.log('üì± 4 tab ƒë√£ ƒë∆∞·ª£c m·ªü:');
        console.log('   üè† Tab 1: Trang ch·ªß HEART');
        console.log('   üè¢ Tab 2: 3D AI Campus (ƒëang hi·ªÉn th·ªã)');
        console.log('   üîß Tab 3: Test page');
        console.log('   ‚ÑπÔ∏è  Tab 4: About page');
        console.log('\nüéÆ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng 3D Campus:');
        console.log('   ‚Ä¢ Chu·ªôt tr√°i + k√©o: Xoay camera');
        console.log('   ‚Ä¢ Chu·ªôt ph·∫£i + k√©o: Di chuy·ªÉn camera');
        console.log('   ‚Ä¢ Scroll: Zoom in/out');
        console.log('\nüìç C√°c ƒëi·ªÉm n·ªïi b·∫≠t trong campus:');
        console.log('   üèóÔ∏è  Twin spiral towers (m√†u mint & pastel blue)');
        console.log('   üåä Waterfront setting v·ªõi crystal ocean');
        console.log('   üè¢ Buildings v·ªõi pastel colors');
        console.log('   üå¥ Palm trees v√† tropical gardens');
        console.log('   üõ•Ô∏è  Marina v·ªõi boats & yachts');
        console.log('\n‚ö° Browser s·∫Ω ·ªü l·∫°i m·ªü ƒë·ªÉ b·∫°n kh√°m ph√° d·ª± √°n!');
        
        // Enable console logging cho t·∫•t c·∫£ c√°c tab
        [page1, page2, page3, page4].forEach((page, index) => {
            page.on('console', msg => console.log(`Tab ${index + 1} Console:`, msg.text()));
            page.on('pageerror', error => console.log(`Tab ${index + 1} Error:`, error.message));
        });
        
        // Ki·ªÉm tra 3D scene ƒë√£ load ch∆∞a
        setTimeout(async () => {
            try {
                const threeLoaded = await page2.evaluate(() => {
                    return typeof THREE !== 'undefined' && document.querySelector('#threejs-container canvas');
                });
                
                if (threeLoaded) {
                    console.log('üéä 3D Scene ƒë√£ render th√†nh c√¥ng!');
                } else {
                    console.log('‚è≥ 3D Scene ƒëang loading...');
                }
            } catch (e) {
                console.log('‚ÑπÔ∏è  ƒêang ki·ªÉm tra 3D scene...');
            }
        }, 3000);
        
    } catch (error) {
        console.error('‚ùå L·ªói khi m·ªü browser:', error.message);
        process.exit(1);
    }
}

// Ch·∫°y function
openProjectInBrowser();
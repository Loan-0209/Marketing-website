// Script ƒë·ªÉ di chuy·ªÉn c√°c t√≤a nh√† kh·ªèi d√≤ng s√¥ng
// =============================================

console.log('üèóÔ∏è === B·∫ÆT ƒê·∫¶U DI CHUY·ªÇN T√íA NH√Ä KH·ªéI S√îNG ===');

// Ki·ªÉm tra scene
if (!window.scene) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y scene!');
} else {
    // V·ªã tr√≠ s√¥ng (th∆∞·ªùng ·ªü x = 210)
    const RIVER_X = 210;
    const SAFE_DISTANCE = 50; // Kho·∫£ng c√°ch an to√†n t·ª´ s√¥ng
    
    let movedCount = 0;
    const buildingsToMove = [];
    
    // T√¨m t·∫•t c·∫£ c√°c t√≤a nh√†
    scene.traverse((object) => {
        if (object.type === 'Mesh' || object.type === 'Group') {
            // Ki·ªÉm tra n·∫øu l√† t√≤a nh√† (kh√¥ng ph·∫£i ground, river, tree, etc.)
            if (object.userData && (
                object.userData.type === 'building' ||
                object.userData.type === 'datacenter' ||
                object.userData.buildingType ||
                object.name?.includes('building') ||
                object.name?.includes('Building') ||
                object.name?.includes('DATA_CENTER') ||
                object.name?.includes('tower') ||
                object.name?.includes('Tower')
            )) {
                // Ki·ªÉm tra n·∫øu ƒëang n·∫±m g·∫ßn s√¥ng
                if (Math.abs(object.position.x - RIVER_X) < SAFE_DISTANCE) {
                    buildingsToMove.push({
                        object: object,
                        oldPosition: object.position.clone(),
                        name: object.name || 'Unnamed Building'
                    });
                }
            }
            
            // Ki·ªÉm tra c√°c t√≤a nh√† d·ª±a tr√™n m√†u s·∫Øc v√† h√¨nh d·∫°ng
            if (object.geometry && 
                object.geometry.type === 'BoxGeometry' && 
                object.position.y > 5) { // T√≤a nh√† th∆∞·ªùng cao h∆°n 5 units
                
                if (Math.abs(object.position.x - RIVER_X) < SAFE_DISTANCE) {
                    buildingsToMove.push({
                        object: object,
                        oldPosition: object.position.clone(),
                        name: 'Building (detected by shape)'
                    });
                }
            }
        }
    });
    
    console.log(`üìä T√¨m th·∫•y ${buildingsToMove.length} t√≤a nh√† c·∫ßn di chuy·ªÉn`);
    
    // Di chuy·ªÉn c√°c t√≤a nh√†
    buildingsToMove.forEach((building, index) => {
        const oldX = building.object.position.x;
        let newX;
        
        // N·∫øu t√≤a nh√† ·ªü b√™n tr√°i s√¥ng, di chuy·ªÉn sang tr√°i
        // N·∫øu ·ªü b√™n ph·∫£i s√¥ng, di chuy·ªÉn sang ph·∫£i
        if (oldX < RIVER_X) {
            newX = RIVER_X - SAFE_DISTANCE - 20 - (index * 30); // Di chuy·ªÉn sang tr√°i
        } else {
            newX = RIVER_X + SAFE_DISTANCE + 20 + (index * 30); // Di chuy·ªÉn sang ph·∫£i
        }
        
        // N·∫øu l√† data center, di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ ƒë·∫∑c bi·ªát
        if (building.name.includes('DATA_CENTER')) {
            newX = 400 + (index * 50); // V·ªã tr√≠ an to√†n cho data center
        }
        
        building.object.position.x = newX;
        movedCount++;
        
        console.log(`‚úÖ Di chuy·ªÉn "${building.name}": x=${oldX} ‚Üí x=${newX}`);
    });
    
    // C·∫≠p nh·∫≠t ma tr·∫≠n v√† render l·∫°i
    scene.updateMatrixWorld(true);
    if (window.renderer && window.camera) {
        renderer.render(scene, camera);
    }
    
    console.log(`\nüéâ === HO√ÄN TH√ÄNH DI CHUY·ªÇN ===`);
    console.log(`üìä T·ªïng c·ªông: ${movedCount} t√≤a nh√† ƒë√£ ƒë∆∞·ª£c di chuy·ªÉn`);
    
    // Ki·ªÉm tra l·∫°i xem c√≤n t√≤a nh√† n√†o tr√™n s√¥ng kh√¥ng
    let remainingCount = 0;
    scene.traverse((object) => {
        if (object.position && Math.abs(object.position.x - RIVER_X) < 30 && 
            object.position.y > 5) {
            remainingCount++;
        }
    });
    
    if (remainingCount > 0) {
        console.warn(`‚ö†Ô∏è V·∫´n c√≤n ${remainingCount} ƒë·ªëi t∆∞·ª£ng g·∫ßn s√¥ng. C√≥ th·ªÉ c·∫ßn ki·ªÉm tra th·ªß c√¥ng.`);
    } else {
        console.log('‚úÖ Kh√¥ng c√≤n t√≤a nh√† n√†o tr√™n s√¥ng!');
    }
}

// H√†m helper ƒë·ªÉ di chuy·ªÉn m·ªôt t√≤a nh√† c·ª• th·ªÉ
window.moveBuilding = function(buildingName, newX, newZ) {
    const building = scene.getObjectByName(buildingName);
    if (building) {
        const oldPos = building.position.clone();
        building.position.x = newX;
        if (newZ !== undefined) building.position.z = newZ;
        scene.updateMatrixWorld(true);
        renderer.render(scene, camera);
        console.log(`‚úÖ Moved ${buildingName}: (${oldPos.x}, ${oldPos.z}) ‚Üí (${newX}, ${newZ || building.position.z})`);
    } else {
        console.error(`‚ùå Building "${buildingName}" not found`);
    }
};

// H√†m ƒë·ªÉ li·ªát k√™ t·∫•t c·∫£ t√≤a nh√†
window.listAllBuildings = function() {
    console.log('üìã === DANH S√ÅCH T·∫§T C·∫¢ T√íA NH√Ä ===');
    let count = 0;
    scene.traverse((object) => {
        if (object.position && object.position.y > 5 && 
            (object.type === 'Mesh' || object.type === 'Group')) {
            count++;
            console.log(`${count}. ${object.name || 'Unnamed'} - Position: (${Math.round(object.position.x)}, ${Math.round(object.position.z)})`);
        }
    });
    console.log(`T·ªïng c·ªông: ${count} t√≤a nh√†`);
};

console.log('\nüí° C√°c l·ªánh h·ªØu √≠ch:');
console.log('- moveBuilding("t√™n_t√≤a_nh√†", x_m·ªõi, z_m·ªõi) - Di chuy·ªÉn m·ªôt t√≤a nh√† c·ª• th·ªÉ');
console.log('- listAllBuildings() - Li·ªát k√™ t·∫•t c·∫£ t√≤a nh√†');
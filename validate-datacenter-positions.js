// Script Validation cho Data Centers Position
// S·ª≠ d·ª•ng: Copy v√† paste v√†o browser console khi ƒëang xem 3D Smart City

(function validateDataCenters() {
    console.log('üîç B·∫ÆT ƒê·∫¶U VALIDATION DATA CENTERS...\n');
    
    // V·ªã tr√≠ m·ª•c ti√™u an to√†n - FULLY WITHIN MAIN PLATFORM (Aligned at x=350)
    const targetPositions = {
        'DATA CENTER 01': { x: 350, z: -120 },
        'DATA CENTER 02': { x: 350, z: 0 },
        'DATA CENTER 03': { x: 350, z: 120 }
    };
    
    // V√πng s√¥ng nguy hi·ªÉm
    const riverZone = {
        xMin: 160,
        xMax: 240,
        zMin: -250,
        zMax: 280
    };
    
    // T√¨m t·∫•t c·∫£ Data Centers trong scene
    let dataCenters = [];
    let issues = [];
    let warnings = [];
    
    if (typeof scene !== 'undefined') {
        scene.traverse((object) => {
            // T√¨m Data Center buildings
            if (object.name && object.name.includes('DATA CENTER')) {
                dataCenters.push({
                    name: object.name,
                    position: object.position.clone(),
                    object: object
                });
            }
        });
    } else {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y scene object. ƒê·∫£m b·∫£o b·∫°n ƒëang ·ªü trang 3D Smart City.');
        return;
    }
    
    console.log(`üìä T√¨m th·∫•y ${dataCenters.length} Data Centers\n`);
    
    // Ki·ªÉm tra t·ª´ng Data Center
    dataCenters.forEach(dc => {
        console.log(`\nüè¢ ${dc.name}:`);
        console.log(`   V·ªã tr√≠ hi·ªán t·∫°i: x=${dc.position.x.toFixed(1)}, z=${dc.position.z.toFixed(1)}`);
        
        // Ki·ªÉm tra v·ªõi v·ªã tr√≠ m·ª•c ti√™u
        const target = targetPositions[dc.name];
        if (target) {
            const deltaX = Math.abs(dc.position.x - target.x);
            const deltaZ = Math.abs(dc.position.z - target.z);
            
            if (deltaX > 5 || deltaZ > 5) {
                issues.push(`${dc.name} KH√îNG ·ªü v·ªã tr√≠ m·ª•c ti√™u! C·∫ßn di chuy·ªÉn ƒë·∫øn x=${target.x}, z=${target.z}`);
                console.log(`   ‚ùå SAI V·ªä TR√ç - C·∫ßn di chuy·ªÉn ${deltaX.toFixed(1)} ƒë∆°n v·ªã theo X, ${deltaZ.toFixed(1)} ƒë∆°n v·ªã theo Z`);
            } else {
                console.log(`   ‚úÖ ƒê√∫ng v·ªã tr√≠ m·ª•c ti√™u`);
            }
        }
        
        // Ki·ªÉm tra an to√†n v·ªõi s√¥ng
        const nearRiver = dc.position.x >= riverZone.xMin && dc.position.x <= riverZone.xMax;
        if (nearRiver) {
            warnings.push(`${dc.name} QU√Å G·∫¶N S√îNG - C√≥ nguy c∆° ng·∫≠p l·ª•t!`);
            console.log(`   ‚ö†Ô∏è C·∫¢NH B√ÅO: Qu√° g·∫ßn v√πng s√¥ng!`);
        }
        
        // T√≠nh kho·∫£ng c√°ch ƒë·∫øn s√¥ng
        const distanceToRiver = Math.min(
            Math.abs(dc.position.x - riverZone.xMax),
            Math.abs(dc.position.x - riverZone.xMin)
        );
        console.log(`   üìè Kho·∫£ng c√°ch ƒë·∫øn s√¥ng: ${distanceToRiver.toFixed(1)} ƒë∆°n v·ªã`);
        
        if (distanceToRiver < 100) {
            warnings.push(`${dc.name} ch·ªâ c√°ch s√¥ng ${distanceToRiver.toFixed(1)} ƒë∆°n v·ªã - C·∫¶N DI CHUY·ªÇN XA H∆†N!`);
        }
    });
    
    // Ki·ªÉm tra Cooling Towers
    console.log('\n\nüí® KI·ªÇM TRA COOLING TOWERS:');
    let coolingTowers = 0;
    scene.traverse((object) => {
        if (object.name && object.name.includes('cooling')) {
            coolingTowers++;
        }
    });
    console.log(`   T√¨m th·∫•y ${coolingTowers} cooling towers`);
    
    // B√°o c√°o t·ªïng h·ª£p
    console.log('\n\nüìã B√ÅO C√ÅO T·ªîNG H·ª¢P:');
    console.log('=====================================');
    
    if (issues.length > 0) {
        console.log('\n‚ùå V·∫§N ƒê·ªÄ NGHI√äM TR·ªåNG:');
        issues.forEach(issue => console.log(`   - ${issue}`));
    }
    
    if (warnings.length > 0) {
        console.log('\n‚ö†Ô∏è C·∫¢NH B√ÅO:');
        warnings.forEach(warning => console.log(`   - ${warning}`));
    }
    
    if (issues.length === 0 && warnings.length === 0) {
        console.log('\n‚úÖ T·∫§T C·∫¢ DATA CENTERS ·ªû V·ªä TR√ç AN TO√ÄN!');
    } else {
        console.log('\nüîß KHUY·∫æN NGH·ªä:');
        console.log('   1. C·∫≠p nh·∫≠t v·ªã tr√≠ Data Centers trong code theo t·ªça ƒë·ªô m·ª•c ti√™u');
        console.log('   2. Di chuy·ªÉn xa kh·ªèi v√πng s√¥ng (x < 350 ho·∫∑c x > 500)');
        console.log('   3. ƒê·∫£m b·∫£o m·ªói Data Center c√≥ 4 cooling towers');
    }
    
    // Hi·ªÉn th·ªã v·ªã tr√≠ m·ª•c ti√™u
    console.log('\nüìç V·ªä TR√ç M·ª§C TI√äU - TR√äN N·ªÄN CH√çNH:');
    Object.entries(targetPositions).forEach(([name, pos]) => {
        console.log(`   ${name}: x=${pos.x}, z=${pos.z} (Tr√™n n·ªÅn ch√≠nh 800x600)`);
    });
    
    console.log('\nüèóÔ∏è TH√îNG TIN N·ªÄN CH√çNH:');
    console.log('   K√≠ch th∆∞·ªõc: 800x600 units');
    console.log('   Trung t√¢m: (100, 0, 0)');
    console.log('   Ph·∫°m vi X: -300 ƒë·∫øn 500');
    console.log('   Ph·∫°m vi Z: -300 ƒë·∫øn 300');
    
    console.log('\n=====================================');
    console.log('üèÅ HO√ÄN TH√ÄNH VALIDATION');
})();
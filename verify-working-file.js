// Verify Working File Script
const fs = require('fs');
const path = require('path');

console.log('üîç Verifying 3D Smart City Fixed File');
console.log('=' .repeat(50));

const workingFile = '3d-campus-smart-city-fixed.html';
const filePath = path.join(__dirname, workingFile);

// Check file exists
if (!fs.existsSync(filePath)) {
    console.error('‚ùå Working file not found:', workingFile);
    process.exit(1);
}

const content = fs.readFileSync(filePath, 'utf8');
const stats = fs.statSync(filePath);

console.log(`\nüìÑ File: ${workingFile}`);
console.log(`üìè Size: ${(stats.size / 1024).toFixed(1)} KB`);
console.log(`üìÖ Modified: ${stats.mtime.toLocaleString()}`);

// Verification checks
const checks = {
    'Singleton Pattern': content.includes('window.smartCity && smartCity.isInitialized'),
    'Canvas Cleanup': content.includes('existingCanvases.forEach(canvas =>'),
    'Animation Frame Cancel': content.includes('cancelAnimationFrame(campus.animationId)'),
    'Single Retry Mechanism': content.includes('SINGLE RETRY MECHANISM'),
    'No Multiple setTimeout': !content.includes('setTimeout(attemptInitialization, 2000)'),
    'Bulletproof Class': content.includes('class BulletproofSmartCity'),
    'Three.js Import': content.includes('three.js/r128/three.min.js'),
    'Vietnamese UI': content.includes('Giai ƒëo·∫°n'),
    'FPS Counter': content.includes('fps-counter'),
    'Canvas Container': content.includes('canvas-container')
};

console.log('\n‚úÖ Verification Results:');
let allPassed = true;
Object.entries(checks).forEach(([check, result]) => {
    console.log(`  ${result ? '‚úÖ' : '‚ùå'} ${check}: ${result ? 'PASSED' : 'FAILED'}`);
    if (!result) allPassed = false;
});

// Count initialization attempts
const initCalls = (content.match(/attemptInitialization/g) || []).length;
const setTimeoutCalls = (content.match(/setTimeout.*attemptInitialization/g) || []).length;

console.log('\nüìä Code Analysis:');
console.log(`  - Total attemptInitialization calls: ${initCalls}`);
console.log(`  - setTimeout with attemptInitialization: ${setTimeoutCalls}`);
console.log(`  - Expected: ‚â§3 setTimeout calls (single retry mechanism)`);

// Final verdict
console.log('\nüéØ Final Verdict:');
if (allPassed && setTimeoutCalls <= 3) {
    console.log('  ‚úÖ This is the WORKING FIXED VERSION');
    console.log('  ‚úÖ Safe to keep this file');
    console.log('  ‚úÖ All other versions can be deleted');
} else {
    console.log('  ‚ö†Ô∏è  This file may have issues');
    console.log('  ‚ö†Ô∏è  Please verify manually before proceeding');
}

console.log('\nüíæ Backup Information:');
console.log(`  - Backup created: backup-3d-cleanup-20250812_105057/`);
console.log(`  - Archive: backup-3d-cleanup-20250812_105057.tar.gz`);
console.log(`  - Total files backed up: 25`);
console.log(`  - Archive size: 181 KB`);